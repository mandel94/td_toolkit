from sqlalchemy import Column, Integer, String, Text, TIMESTAMP, SmallInteger, DateTime
from models.base import MyBase
from sqlalchemy.types import Float
from datetime import datetime

class Article(MyBase):
    __tablename__ = 'article'
    __table_args__ = {
        "extend_existing": True
    }
    
    id = Column(Integer, primary_key=True)
    title = Column(String(1000), nullable=False)  # VARCHAR(1000)
    link = Column(String(1000), nullable=False)   # VARCHAR(1000)
    pagepath = Column(String(255), nullable=False, unique=True)  # VARCHAR(255), adjusted length as needed
    pubdate = Column(TIMESTAMP)
    wp_category = Column(String(255))  # VARCHAR(100)
    wp_publication_tags = Column(String(255))  # VARCHAR(255), adjusted length as needed
    content = Column(Text)  # TEXT, for potentially large content
    wp_post_id = Column(Integer)
    wp_post_views = Column(Integer)
    yoast_focus_keyword = Column(String(255))  # VARCHAR(255), adjusted length as needed
    yoast_metadesc = Column(String(255))  # VARCHAR(255), adjusted length as needed
    yoast_seo_score = Column(SmallInteger)
    yoast_content_readability_score = Column(SmallInteger)
    yoast_keyword_synonyms = Column(String(255))  # VARCHAR(255), adjusted length as needed
    yoast_estimated_reading_time = Column(SmallInteger)
    ga4_views = Column(Integer) # Da sezione "pagine e schermate" https://analytics.google.com/analytics/web/?authuser=0#/p394327334/reports/explorer?params=_u..nav%3Dmaui%26_u.comparisonOption%3Ddisabled%26_u.date00%3D20250201%26_u.date01%3D20250311&r=landing-page&ruid=landing-page,life-cycle,engagement&collectionId=life-cycle
    ga4_active_users = Column(Integer)
    ga4_views_per_active_user = Column(Float) # https://analytics.google.com/analytics/web/?authuser=0#/p394327334/reports/explorer?params=_u..nav%3Dmaui%26_u.comparisonOption%3Ddisabled%26_u.date00%3D20250201%26_u.date01%3D20250311&r=landing-page&ruid=landing-page,life-cycle,engagement&collectionId=life-cycle
    ga4_avg_engagement_time_per_active_user = Column(Float)
    ga4_sessions = Column(Integer) # Sessions generated by the article (Fonte: https://analytics.google.com/analytics/web/?authuser=0#/p394327334/reports/explorer?params=_u..nav%3Dmaui%26_u.comparisonOption%3Ddisabled%26_u.date00%3D20250201%26_u.date01%3D20250311&r=landing-page&ruid=landing-page,life-cycle,engagement&collectionId=life-cycle)
    ga4_new_users = Column(Integer) 
    ga4_new_core_readers = Column(Integer) # New core readers (Event count of 'new_core_reader' from ga4)
    ga4_avg_engagement_duration_per_session = Column(Float) # Average duration per session. Fonte dati: https://analytics.google.com/analytics/web/?authuser=0#/p394327334/reports/explorer?params=_u..nav%3Dmaui%26_u.comparisonOption%3Ddisabled%26_u.date00%3D20250201%26_u.date01%3D20250311&r=landing-page&ruid=landing-page,life-cycle,engagement&collectionId=life-cycle
    last_updated = Column(DateTime, default=datetime.now, onupdate=datetime.now) # The Column.default and Column.onupdate keyword arguments also accept Python functions. These functions are invoked at the time of insert or update if no other value for that column is supplied, and the value returned is used for the columnâ€™s value. 
    

# Example of how to connect to a database (e.g., SQLite for local development)
# Base.metadata.create_all(engine)


